# coding: utf-8

"""
    traQ v3

    traQ v3 API

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError

from typing_extensions import Annotated
from pydantic import Field, StrictBool, StrictStr

from typing import List, Optional

from traqapi.models.active_o_auth2_token import ActiveOAuth2Token
from traqapi.models.get_client200_response import GetClient200Response
from traqapi.models.o_auth2_client import OAuth2Client
from traqapi.models.o_auth2_client_detail import OAuth2ClientDetail
from traqapi.models.o_auth2_prompt import OAuth2Prompt
from traqapi.models.o_auth2_response_type import OAuth2ResponseType
from traqapi.models.o_auth2_token import OAuth2Token
from traqapi.models.patch_client_request import PatchClientRequest
from traqapi.models.post_client_request import PostClientRequest

from traqapi.api_client import ApiClient
from traqapi.api_response import ApiResponse
from traqapi.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class Oauth2Api:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_client(self, post_client_request : Optional[PostClientRequest] = None, **kwargs) -> OAuth2ClientDetail:  # noqa: E501
        """OAuth2クライアントを作成  # noqa: E501

        OAuth2クライアントを作成します。  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_client(post_client_request, async_req=True)
        >>> result = thread.get()

        :param post_client_request:
        :type post_client_request: PostClientRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: OAuth2ClientDetail
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the create_client_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.create_client_with_http_info(post_client_request, **kwargs)  # noqa: E501

    @validate_arguments
    def create_client_with_http_info(self, post_client_request : Optional[PostClientRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """OAuth2クライアントを作成  # noqa: E501

        OAuth2クライアントを作成します。  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_client_with_http_info(post_client_request, async_req=True)
        >>> result = thread.get()

        :param post_client_request:
        :type post_client_request: PostClientRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(OAuth2ClientDetail, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'post_client_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_client" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['post_client_request'] is not None:
            _body_params = _params['post_client_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['OAuth2', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '201': "OAuth2ClientDetail",
            '400': None,
        }

        return self.api_client.call_api(
            '/clients', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_client(self, client_id : Annotated[StrictStr, Field(..., description="OAuth2クライアントUUID")], **kwargs) -> None:  # noqa: E501
        """OAuth2クライアントを削除  # noqa: E501

        指定したOAuth2クライアントを削除します。 対象のクライアントの管理権限が必要です。正常に削除された場合、このクライアントに対する認可は全て取り消されます。  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_client(client_id, async_req=True)
        >>> result = thread.get()

        :param client_id: OAuth2クライアントUUID (required)
        :type client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the delete_client_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.delete_client_with_http_info(client_id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_client_with_http_info(self, client_id : Annotated[StrictStr, Field(..., description="OAuth2クライアントUUID")], **kwargs) -> ApiResponse:  # noqa: E501
        """OAuth2クライアントを削除  # noqa: E501

        指定したOAuth2クライアントを削除します。 対象のクライアントの管理権限が必要です。正常に削除された場合、このクライアントに対する認可は全て取り消されます。  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_client_with_http_info(client_id, async_req=True)
        >>> result = thread.get()

        :param client_id: OAuth2クライアントUUID (required)
        :type client_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'client_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_client" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_id']:
            _path_params['clientId'] = _params['client_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['OAuth2', 'bearerAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/clients/{clientId}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def edit_client(self, client_id : Annotated[StrictStr, Field(..., description="OAuth2クライアントUUID")], patch_client_request : Optional[PatchClientRequest] = None, **kwargs) -> None:  # noqa: E501
        """OAuth2クライアント情報を変更  # noqa: E501

        指定したOAuth2クライアントの情報を変更します。 対象のクライアントの管理権限が必要です。 クライアント開発者UUIDを変更した場合は、変更先ユーザーにクライアント管理権限が移譲され、自分自身は権限を失います。  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.edit_client(client_id, patch_client_request, async_req=True)
        >>> result = thread.get()

        :param client_id: OAuth2クライアントUUID (required)
        :type client_id: str
        :param patch_client_request: 
        :type patch_client_request: PatchClientRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the edit_client_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.edit_client_with_http_info(client_id, patch_client_request, **kwargs)  # noqa: E501

    @validate_arguments
    def edit_client_with_http_info(self, client_id : Annotated[StrictStr, Field(..., description="OAuth2クライアントUUID")], patch_client_request : Optional[PatchClientRequest] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """OAuth2クライアント情報を変更  # noqa: E501

        指定したOAuth2クライアントの情報を変更します。 対象のクライアントの管理権限が必要です。 クライアント開発者UUIDを変更した場合は、変更先ユーザーにクライアント管理権限が移譲され、自分自身は権限を失います。  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.edit_client_with_http_info(client_id, patch_client_request, async_req=True)
        >>> result = thread.get()

        :param client_id: OAuth2クライアントUUID (required)
        :type client_id: str
        :param patch_client_request: 
        :type patch_client_request: PatchClientRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'client_id',
            'patch_client_request'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method edit_client" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_id']:
            _path_params['clientId'] = _params['client_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['patch_client_request'] is not None:
            _body_params = _params['patch_client_request']

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['OAuth2', 'bearerAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/clients/{clientId}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_client(self, client_id : Annotated[StrictStr, Field(..., description="OAuth2クライアントUUID")], detail : Annotated[Optional[StrictBool], Field(description="詳細情報を含めるかどうか")] = None, **kwargs) -> GetClient200Response:  # noqa: E501
        """OAuth2クライアント情報を取得  # noqa: E501

        指定したOAuth2クライアントの情報を取得します。 詳細情報の取得には対象のクライアントの管理権限が必要です。  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_client(client_id, detail, async_req=True)
        >>> result = thread.get()

        :param client_id: OAuth2クライアントUUID (required)
        :type client_id: str
        :param detail: 詳細情報を含めるかどうか
        :type detail: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetClient200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_client_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_client_with_http_info(client_id, detail, **kwargs)  # noqa: E501

    @validate_arguments
    def get_client_with_http_info(self, client_id : Annotated[StrictStr, Field(..., description="OAuth2クライアントUUID")], detail : Annotated[Optional[StrictBool], Field(description="詳細情報を含めるかどうか")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """OAuth2クライアント情報を取得  # noqa: E501

        指定したOAuth2クライアントの情報を取得します。 詳細情報の取得には対象のクライアントの管理権限が必要です。  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_client_with_http_info(client_id, detail, async_req=True)
        >>> result = thread.get()

        :param client_id: OAuth2クライアントUUID (required)
        :type client_id: str
        :param detail: 詳細情報を含めるかどうか
        :type detail: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetClient200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'client_id',
            'detail'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['client_id']:
            _path_params['clientId'] = _params['client_id']


        # process the query parameters
        _query_params = []
        if _params.get('detail') is not None:  # noqa: E501
            _query_params.append(('detail', _params['detail']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "GetClient200Response",
            '403': None,
            '404': None,
        }

        return self.api_client.call_api(
            '/clients/{clientId}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_clients(self, all : Annotated[Optional[StrictBool], Field(description="全てのクライアントを取得するかどうか")] = None, **kwargs) -> List[OAuth2Client]:  # noqa: E501
        """OAuth2クライアントのリストを取得  # noqa: E501

        自身が開発者のOAuth2クライアントのリストを取得します。 `all`が`true`の場合、全開発者の全クライアントのリストを返します。  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_clients(all, async_req=True)
        >>> result = thread.get()

        :param all: 全てのクライアントを取得するかどうか
        :type all: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[OAuth2Client]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_clients_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_clients_with_http_info(all, **kwargs)  # noqa: E501

    @validate_arguments
    def get_clients_with_http_info(self, all : Annotated[Optional[StrictBool], Field(description="全てのクライアントを取得するかどうか")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """OAuth2クライアントのリストを取得  # noqa: E501

        自身が開発者のOAuth2クライアントのリストを取得します。 `all`が`true`の場合、全開発者の全クライアントのリストを返します。  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_clients_with_http_info(all, async_req=True)
        >>> result = thread.get()

        :param all: 全てのクライアントを取得するかどうか
        :type all: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[OAuth2Client], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'all'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_clients" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('all') is not None:  # noqa: E501
            _query_params.append(('all', _params['all']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "List[OAuth2Client]",
        }

        return self.api_client.call_api(
            '/clients', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_my_tokens(self, **kwargs) -> List[ActiveOAuth2Token]:  # noqa: E501
        """有効トークンのリストを取得  # noqa: E501

        有効な自分に発行されたOAuth2トークンのリストを取得します。  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_my_tokens(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[ActiveOAuth2Token]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_my_tokens_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_my_tokens_with_http_info(**kwargs)  # noqa: E501

    @validate_arguments
    def get_my_tokens_with_http_info(self, **kwargs) -> ApiResponse:  # noqa: E501
        """有効トークンのリストを取得  # noqa: E501

        有効な自分に発行されたOAuth2トークンのリストを取得します。  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_my_tokens_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[ActiveOAuth2Token], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_my_tokens" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['OAuth2', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "List[ActiveOAuth2Token]",
        }

        return self.api_client.call_api(
            '/users/me/tokens', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def get_o_auth2_authorize(self, client_id : StrictStr, response_type : Optional[OAuth2ResponseType] = None, redirect_uri : Optional[StrictStr] = None, scope : Optional[StrictStr] = None, state : Optional[StrictStr] = None, code_challenge : Optional[StrictStr] = None, code_challenge_method : Optional[StrictStr] = None, nonce : Optional[StrictStr] = None, prompt : Optional[OAuth2Prompt] = None, **kwargs) -> None:  # noqa: E501
        """OAuth2 認可エンドポイント  # noqa: E501

        OAuth2 認可エンドポイント  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_o_auth2_authorize(client_id, response_type, redirect_uri, scope, state, code_challenge, code_challenge_method, nonce, prompt, async_req=True)
        >>> result = thread.get()

        :param client_id: (required)
        :type client_id: str
        :param response_type:
        :type response_type: OAuth2ResponseType
        :param redirect_uri:
        :type redirect_uri: str
        :param scope:
        :type scope: str
        :param state:
        :type state: str
        :param code_challenge:
        :type code_challenge: str
        :param code_challenge_method:
        :type code_challenge_method: str
        :param nonce:
        :type nonce: str
        :param prompt:
        :type prompt: OAuth2Prompt
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_o_auth2_authorize_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_o_auth2_authorize_with_http_info(client_id, response_type, redirect_uri, scope, state, code_challenge, code_challenge_method, nonce, prompt, **kwargs)  # noqa: E501

    @validate_arguments
    def get_o_auth2_authorize_with_http_info(self, client_id : StrictStr, response_type : Optional[OAuth2ResponseType] = None, redirect_uri : Optional[StrictStr] = None, scope : Optional[StrictStr] = None, state : Optional[StrictStr] = None, code_challenge : Optional[StrictStr] = None, code_challenge_method : Optional[StrictStr] = None, nonce : Optional[StrictStr] = None, prompt : Optional[OAuth2Prompt] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """OAuth2 認可エンドポイント  # noqa: E501

        OAuth2 認可エンドポイント  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_o_auth2_authorize_with_http_info(client_id, response_type, redirect_uri, scope, state, code_challenge, code_challenge_method, nonce, prompt, async_req=True)
        >>> result = thread.get()

        :param client_id: (required)
        :type client_id: str
        :param response_type:
        :type response_type: OAuth2ResponseType
        :param redirect_uri:
        :type redirect_uri: str
        :param scope:
        :type scope: str
        :param state:
        :type state: str
        :param code_challenge:
        :type code_challenge: str
        :param code_challenge_method:
        :type code_challenge_method: str
        :param nonce:
        :type nonce: str
        :param prompt:
        :type prompt: OAuth2Prompt
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'client_id',
            'response_type',
            'redirect_uri',
            'scope',
            'state',
            'code_challenge',
            'code_challenge_method',
            'nonce',
            'prompt'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_o_auth2_authorize" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('response_type') is not None:  # noqa: E501
            _query_params.append(('response_type', _params['response_type'].value))

        if _params.get('client_id') is not None:  # noqa: E501
            _query_params.append(('client_id', _params['client_id']))

        if _params.get('redirect_uri') is not None:  # noqa: E501
            _query_params.append(('redirect_uri', _params['redirect_uri']))

        if _params.get('scope') is not None:  # noqa: E501
            _query_params.append(('scope', _params['scope']))

        if _params.get('state') is not None:  # noqa: E501
            _query_params.append(('state', _params['state']))

        if _params.get('code_challenge') is not None:  # noqa: E501
            _query_params.append(('code_challenge', _params['code_challenge']))

        if _params.get('code_challenge_method') is not None:  # noqa: E501
            _query_params.append(('code_challenge_method', _params['code_challenge_method']))

        if _params.get('nonce') is not None:  # noqa: E501
            _query_params.append(('nonce', _params['nonce']))

        if _params.get('prompt') is not None:  # noqa: E501
            _query_params.append(('prompt', _params['prompt'].value))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['OAuth2', 'bearerAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/oauth2/authorize', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def post_o_auth2_authorize(self, client_id : StrictStr, response_type : Optional[OAuth2ResponseType] = None, redirect_uri : Optional[StrictStr] = None, scope : Optional[StrictStr] = None, state : Optional[StrictStr] = None, code_challenge : Optional[StrictStr] = None, code_challenge_method : Optional[StrictStr] = None, nonce : Optional[StrictStr] = None, prompt : Optional[OAuth2Prompt] = None, **kwargs) -> None:  # noqa: E501
        """OAuth2 認可エンドポイント  # noqa: E501

        OAuth2 認可エンドポイント  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_o_auth2_authorize(client_id, response_type, redirect_uri, scope, state, code_challenge, code_challenge_method, nonce, prompt, async_req=True)
        >>> result = thread.get()

        :param client_id: (required)
        :type client_id: str
        :param response_type:
        :type response_type: OAuth2ResponseType
        :param redirect_uri:
        :type redirect_uri: str
        :param scope:
        :type scope: str
        :param state:
        :type state: str
        :param code_challenge:
        :type code_challenge: str
        :param code_challenge_method:
        :type code_challenge_method: str
        :param nonce:
        :type nonce: str
        :param prompt:
        :type prompt: OAuth2Prompt
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the post_o_auth2_authorize_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.post_o_auth2_authorize_with_http_info(client_id, response_type, redirect_uri, scope, state, code_challenge, code_challenge_method, nonce, prompt, **kwargs)  # noqa: E501

    @validate_arguments
    def post_o_auth2_authorize_with_http_info(self, client_id : StrictStr, response_type : Optional[OAuth2ResponseType] = None, redirect_uri : Optional[StrictStr] = None, scope : Optional[StrictStr] = None, state : Optional[StrictStr] = None, code_challenge : Optional[StrictStr] = None, code_challenge_method : Optional[StrictStr] = None, nonce : Optional[StrictStr] = None, prompt : Optional[OAuth2Prompt] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """OAuth2 認可エンドポイント  # noqa: E501

        OAuth2 認可エンドポイント  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_o_auth2_authorize_with_http_info(client_id, response_type, redirect_uri, scope, state, code_challenge, code_challenge_method, nonce, prompt, async_req=True)
        >>> result = thread.get()

        :param client_id: (required)
        :type client_id: str
        :param response_type:
        :type response_type: OAuth2ResponseType
        :param redirect_uri:
        :type redirect_uri: str
        :param scope:
        :type scope: str
        :param state:
        :type state: str
        :param code_challenge:
        :type code_challenge: str
        :param code_challenge_method:
        :type code_challenge_method: str
        :param nonce:
        :type nonce: str
        :param prompt:
        :type prompt: OAuth2Prompt
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'client_id',
            'response_type',
            'redirect_uri',
            'scope',
            'state',
            'code_challenge',
            'code_challenge_method',
            'nonce',
            'prompt'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_o_auth2_authorize" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        if _params['response_type']:
            _form_params.append(('response_type', _params['response_type']))

        if _params['client_id']:
            _form_params.append(('client_id', _params['client_id']))

        if _params['redirect_uri']:
            _form_params.append(('redirect_uri', _params['redirect_uri']))

        if _params['scope']:
            _form_params.append(('scope', _params['scope']))

        if _params['state']:
            _form_params.append(('state', _params['state']))

        if _params['code_challenge']:
            _form_params.append(('code_challenge', _params['code_challenge']))

        if _params['code_challenge_method']:
            _form_params.append(('code_challenge_method', _params['code_challenge_method']))

        if _params['nonce']:
            _form_params.append(('nonce', _params['nonce']))

        if _params['prompt']:
            _form_params.append(('prompt', _params['prompt']))

        # process the body parameter
        _body_params = None
        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['OAuth2', 'bearerAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/oauth2/authorize', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def post_o_auth2_authorize_decide(self, submit : Annotated[StrictStr, Field(..., description="承諾する場合は\\\"approve\\\"")], **kwargs) -> None:  # noqa: E501
        """OAuth2 認可承諾API  # noqa: E501

        OAuth2 認可承諾  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_o_auth2_authorize_decide(submit, async_req=True)
        >>> result = thread.get()

        :param submit: 承諾する場合は\\\"approve\\\" (required)
        :type submit: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the post_o_auth2_authorize_decide_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.post_o_auth2_authorize_decide_with_http_info(submit, **kwargs)  # noqa: E501

    @validate_arguments
    def post_o_auth2_authorize_decide_with_http_info(self, submit : Annotated[StrictStr, Field(..., description="承諾する場合は\\\"approve\\\"")], **kwargs) -> ApiResponse:  # noqa: E501
        """OAuth2 認可承諾API  # noqa: E501

        OAuth2 認可承諾  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_o_auth2_authorize_decide_with_http_info(submit, async_req=True)
        >>> result = thread.get()

        :param submit: 承諾する場合は\\\"approve\\\" (required)
        :type submit: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'submit'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_o_auth2_authorize_decide" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        if _params['submit']:
            _form_params.append(('submit', _params['submit']))

        # process the body parameter
        _body_params = None
        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['OAuth2', 'bearerAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/oauth2/authorize/decide', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def post_o_auth2_token(self, grant_type : StrictStr, code : Optional[StrictStr] = None, redirect_uri : Optional[StrictStr] = None, client_id : Optional[StrictStr] = None, code_verifier : Optional[StrictStr] = None, username : Optional[StrictStr] = None, password : Optional[StrictStr] = None, scope : Optional[StrictStr] = None, refresh_token : Optional[StrictStr] = None, client_secret : Optional[StrictStr] = None, **kwargs) -> OAuth2Token:  # noqa: E501
        """OAuth2 トークンエンドポイント  # noqa: E501

        OAuth2 トークンエンドポイント  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_o_auth2_token(grant_type, code, redirect_uri, client_id, code_verifier, username, password, scope, refresh_token, client_secret, async_req=True)
        >>> result = thread.get()

        :param grant_type: (required)
        :type grant_type: str
        :param code:
        :type code: str
        :param redirect_uri:
        :type redirect_uri: str
        :param client_id:
        :type client_id: str
        :param code_verifier:
        :type code_verifier: str
        :param username:
        :type username: str
        :param password:
        :type password: str
        :param scope:
        :type scope: str
        :param refresh_token:
        :type refresh_token: str
        :param client_secret:
        :type client_secret: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: OAuth2Token
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the post_o_auth2_token_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.post_o_auth2_token_with_http_info(grant_type, code, redirect_uri, client_id, code_verifier, username, password, scope, refresh_token, client_secret, **kwargs)  # noqa: E501

    @validate_arguments
    def post_o_auth2_token_with_http_info(self, grant_type : StrictStr, code : Optional[StrictStr] = None, redirect_uri : Optional[StrictStr] = None, client_id : Optional[StrictStr] = None, code_verifier : Optional[StrictStr] = None, username : Optional[StrictStr] = None, password : Optional[StrictStr] = None, scope : Optional[StrictStr] = None, refresh_token : Optional[StrictStr] = None, client_secret : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """OAuth2 トークンエンドポイント  # noqa: E501

        OAuth2 トークンエンドポイント  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_o_auth2_token_with_http_info(grant_type, code, redirect_uri, client_id, code_verifier, username, password, scope, refresh_token, client_secret, async_req=True)
        >>> result = thread.get()

        :param grant_type: (required)
        :type grant_type: str
        :param code:
        :type code: str
        :param redirect_uri:
        :type redirect_uri: str
        :param client_id:
        :type client_id: str
        :param code_verifier:
        :type code_verifier: str
        :param username:
        :type username: str
        :param password:
        :type password: str
        :param scope:
        :type scope: str
        :param refresh_token:
        :type refresh_token: str
        :param client_secret:
        :type client_secret: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(OAuth2Token, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'grant_type',
            'code',
            'redirect_uri',
            'client_id',
            'code_verifier',
            'username',
            'password',
            'scope',
            'refresh_token',
            'client_secret'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_o_auth2_token" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        if _params['grant_type']:
            _form_params.append(('grant_type', _params['grant_type']))

        if _params['code']:
            _form_params.append(('code', _params['code']))

        if _params['redirect_uri']:
            _form_params.append(('redirect_uri', _params['redirect_uri']))

        if _params['client_id']:
            _form_params.append(('client_id', _params['client_id']))

        if _params['code_verifier']:
            _form_params.append(('code_verifier', _params['code_verifier']))

        if _params['username']:
            _form_params.append(('username', _params['username']))

        if _params['password']:
            _form_params.append(('password', _params['password']))

        if _params['scope']:
            _form_params.append(('scope', _params['scope']))

        if _params['refresh_token']:
            _form_params.append(('refresh_token', _params['refresh_token']))

        if _params['client_secret']:
            _form_params.append(('client_secret', _params['client_secret']))

        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['OAuth2', 'bearerAuth']  # noqa: E501

        _response_types_map = {
            '200': "OAuth2Token",
            '400': None,
            '403': None,
        }

        return self.api_client.call_api(
            '/oauth2/token', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def revoke_my_token(self, token_id : Annotated[StrictStr, Field(..., description="OAuth2トークンUUID")], **kwargs) -> None:  # noqa: E501
        """トークンの認可を取り消す  # noqa: E501

        自分の指定したトークンの認可を取り消します。  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.revoke_my_token(token_id, async_req=True)
        >>> result = thread.get()

        :param token_id: OAuth2トークンUUID (required)
        :type token_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the revoke_my_token_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.revoke_my_token_with_http_info(token_id, **kwargs)  # noqa: E501

    @validate_arguments
    def revoke_my_token_with_http_info(self, token_id : Annotated[StrictStr, Field(..., description="OAuth2トークンUUID")], **kwargs) -> ApiResponse:  # noqa: E501
        """トークンの認可を取り消す  # noqa: E501

        自分の指定したトークンの認可を取り消します。  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.revoke_my_token_with_http_info(token_id, async_req=True)
        >>> result = thread.get()

        :param token_id: OAuth2トークンUUID (required)
        :type token_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'token_id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revoke_my_token" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['token_id']:
            _path_params['tokenId'] = _params['token_id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # authentication setting
        _auth_settings = ['OAuth2', 'bearerAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/users/me/tokens/{tokenId}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def revoke_o_auth2_token(self, token : Annotated[StrictStr, Field(..., description="無効化するOAuth2トークンまたはOAuth2リフレッシュトークン")], **kwargs) -> None:  # noqa: E501
        """OAuth2 トークン無効化エンドポイント  # noqa: E501

        OAuth2 トークン無効化エンドポイント  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.revoke_o_auth2_token(token, async_req=True)
        >>> result = thread.get()

        :param token: 無効化するOAuth2トークンまたはOAuth2リフレッシュトークン (required)
        :type token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the revoke_o_auth2_token_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.revoke_o_auth2_token_with_http_info(token, **kwargs)  # noqa: E501

    @validate_arguments
    def revoke_o_auth2_token_with_http_info(self, token : Annotated[StrictStr, Field(..., description="無効化するOAuth2トークンまたはOAuth2リフレッシュトークン")], **kwargs) -> ApiResponse:  # noqa: E501
        """OAuth2 トークン無効化エンドポイント  # noqa: E501

        OAuth2 トークン無効化エンドポイント  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.revoke_o_auth2_token_with_http_info(token, async_req=True)
        >>> result = thread.get()

        :param token: 無効化するOAuth2トークンまたはOAuth2リフレッシュトークン (required)
        :type token: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        _params = locals()

        _all_params = [
            'token'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method revoke_o_auth2_token" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        if _params['token']:
            _form_params.append(('token', _params['token']))

        # process the body parameter
        _body_params = None
        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/x-www-form-urlencoded']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['OAuth2', 'bearerAuth']  # noqa: E501

        _response_types_map = {}

        return self.api_client.call_api(
            '/oauth2/revoke', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
