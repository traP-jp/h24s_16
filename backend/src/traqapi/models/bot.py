# coding: utf-8

"""
    traQ v3

    traQ v3 API

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime as _datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from traqapi.models.bot_mode import BotMode
from traqapi.models.bot_state import BotState
from typing import Optional, Set
from typing_extensions import Self

class Bot(BaseModel):
    """
    BOT情報
    """ # noqa: E501
    id: StrictStr = Field(description="BOT UUID")
    bot_user_id: StrictStr = Field(description="BOTユーザーUUID", alias="botUserId")
    description: Annotated[str, Field(strict=True, max_length=1000)] = Field(description="説明")
    developer_id: StrictStr = Field(description="BOT開発者UUID", alias="developerId")
    subscribe_events: List[StrictStr] = Field(description="BOTが購読しているイベントの配列", alias="subscribeEvents")
    mode: BotMode
    state: BotState
    created_at: _datetime = Field(description="作成日時", alias="createdAt")
    updated_at: _datetime = Field(description="更新日時", alias="updatedAt")
    __properties: ClassVar[List[str]] = ["id", "botUserId", "description", "developerId", "subscribeEvents", "mode", "state", "createdAt", "updatedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Bot from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Bot from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "botUserId": obj.get("botUserId"),
            "description": obj.get("description"),
            "developerId": obj.get("developerId"),
            "subscribeEvents": obj.get("subscribeEvents"),
            "mode": obj.get("mode"),
            "state": obj.get("state"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj


