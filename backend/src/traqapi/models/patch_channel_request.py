# coding: utf-8

"""
    traQ v3

    traQ v3 API

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, constr, validator

class PatchChannelRequest(BaseModel):
    """
    チャンネル情報変更リクエスト  # noqa: E501
    """
    name: Optional[constr(strict=True)] = Field(None, description="チャンネル名")
    archived: Optional[StrictBool] = Field(None, description="アーカイブされているかどうか")
    force: Optional[StrictBool] = Field(None, description="強制通知チャンネルかどうか")
    parent: Optional[StrictStr] = Field(None, description="親チャンネルUUID")
    __properties = ["name", "archived", "force", "parent"]

    @validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9-_]{1,20}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9-_]{1,20}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PatchChannelRequest:
        """Create an instance of PatchChannelRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PatchChannelRequest:
        """Create an instance of PatchChannelRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PatchChannelRequest.parse_obj(obj)

        _obj = PatchChannelRequest.parse_obj({
            "name": obj.get("name"),
            "archived": obj.get("archived"),
            "force": obj.get("force"),
            "parent": obj.get("parent")
        })
        return _obj


