# coding: utf-8

"""
    traQ v3

    traQ v3 API

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime

from pydantic import BaseModel, Field, StrictStr, validator
from traqapi.models.channel_event_detail import ChannelEventDetail

class ChannelEvent(BaseModel):
    """
    チャンネルイベント  # noqa: E501
    """
    type: StrictStr = Field(..., description="イベントタイプ")
    datetime: datetime = Field(..., description="イベント日時")
    detail: ChannelEventDetail = Field(...)
    __properties = ["type", "datetime", "detail"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('TopicChanged', 'SubscribersChanged', 'PinAdded', 'PinRemoved', 'NameChanged', 'ParentChanged', 'VisibilityChanged', 'ForcedNotificationChanged', 'ChildCreated'):
            raise ValueError("must be one of enum values ('TopicChanged', 'SubscribersChanged', 'PinAdded', 'PinRemoved', 'NameChanged', 'ParentChanged', 'VisibilityChanged', 'ForcedNotificationChanged', 'ChildCreated')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ChannelEvent:
        """Create an instance of ChannelEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of detail
        if self.detail:
            _dict['detail'] = self.detail.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ChannelEvent:
        """Create an instance of ChannelEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ChannelEvent.parse_obj(obj)

        _obj = ChannelEvent.parse_obj({
            "type": obj.get("type"),
            "datetime": obj.get("datetime"),
            "detail": ChannelEventDetail.from_dict(obj.get("detail")) if obj.get("detail") is not None else None
        })
        return _obj


