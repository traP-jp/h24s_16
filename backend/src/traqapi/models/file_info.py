# coding: utf-8

"""
    traQ v3

    traQ v3 API

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime as _datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from traqapi.models.file_info_thumbnail import FileInfoThumbnail
from traqapi.models.thumbnail_info import ThumbnailInfo
from typing import Optional, Set
from typing_extensions import Self

class FileInfo(BaseModel):
    """
    ファイル情報
    """ # noqa: E501
    id: StrictStr = Field(description="ファイルUUID")
    name: StrictStr = Field(description="ファイル名")
    mime: StrictStr = Field(description="MIMEタイプ")
    size: StrictInt = Field(description="ファイルサイズ")
    md5: StrictStr = Field(description="MD5ハッシュ")
    is_animated_image: StrictBool = Field(description="アニメーション画像かどうか", alias="isAnimatedImage")
    created_at: _datetime = Field(description="アップロード日時", alias="createdAt")
    thumbnails: List[ThumbnailInfo]
    thumbnail: Optional[FileInfoThumbnail]
    channel_id: Optional[StrictStr] = Field(description="属しているチャンネルUUID", alias="channelId")
    uploader_id: Optional[StrictStr] = Field(description="アップロード者UUID", alias="uploaderId")
    __properties: ClassVar[List[str]] = ["id", "name", "mime", "size", "md5", "isAnimatedImage", "createdAt", "thumbnails", "thumbnail", "channelId", "uploaderId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FileInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in thumbnails (list)
        _items = []
        if self.thumbnails:
            for _item in self.thumbnails:
                if _item:
                    _items.append(_item.to_dict())
            _dict['thumbnails'] = _items
        # override the default output from pydantic by calling `to_dict()` of thumbnail
        if self.thumbnail:
            _dict['thumbnail'] = self.thumbnail.to_dict()
        # set to None if thumbnail (nullable) is None
        # and model_fields_set contains the field
        if self.thumbnail is None and "thumbnail" in self.model_fields_set:
            _dict['thumbnail'] = None

        # set to None if channel_id (nullable) is None
        # and model_fields_set contains the field
        if self.channel_id is None and "channel_id" in self.model_fields_set:
            _dict['channelId'] = None

        # set to None if uploader_id (nullable) is None
        # and model_fields_set contains the field
        if self.uploader_id is None and "uploader_id" in self.model_fields_set:
            _dict['uploaderId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FileInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "mime": obj.get("mime"),
            "size": obj.get("size"),
            "md5": obj.get("md5"),
            "isAnimatedImage": obj.get("isAnimatedImage"),
            "createdAt": obj.get("createdAt"),
            "thumbnails": [ThumbnailInfo.from_dict(_item) for _item in obj["thumbnails"]] if obj.get("thumbnails") is not None else None,
            "thumbnail": FileInfoThumbnail.from_dict(obj["thumbnail"]) if obj.get("thumbnail") is not None else None,
            "channelId": obj.get("channelId"),
            "uploaderId": obj.get("uploaderId")
        })
        return _obj


