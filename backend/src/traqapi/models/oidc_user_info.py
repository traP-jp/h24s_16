# coding: utf-8

"""
    traQ v3

    traQ v3 API

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, constr, validator
from traqapi.models.oidc_traq_user_info import OIDCTraqUserInfo

class OIDCUserInfo(BaseModel):
    """
    自分のユーザー詳細情報  # noqa: E501
    """
    sub: StrictStr = Field(..., description="ユーザーUUID")
    name: constr(strict=True) = Field(..., description="ユーザー名")
    preferred_username: constr(strict=True) = Field(..., description="ユーザー名")
    picture: StrictStr = Field(..., description="アイコン画像URL")
    updated_at: Optional[StrictInt] = Field(None, description="更新日時")
    traq: Optional[OIDCTraqUserInfo] = None
    __properties = ["sub", "name", "preferred_username", "picture", "updated_at", "traq"]

    @validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9_-]{1,32}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9_-]{1,32}$/")
        return value

    @validator('preferred_username')
    def preferred_username_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9_-]{1,32}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9_-]{1,32}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OIDCUserInfo:
        """Create an instance of OIDCUserInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of traq
        if self.traq:
            _dict['traq'] = self.traq.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OIDCUserInfo:
        """Create an instance of OIDCUserInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OIDCUserInfo.parse_obj(obj)

        _obj = OIDCUserInfo.parse_obj({
            "sub": obj.get("sub"),
            "name": obj.get("name"),
            "preferred_username": obj.get("preferred_username"),
            "picture": obj.get("picture"),
            "updated_at": obj.get("updated_at"),
            "traq": OIDCTraqUserInfo.from_dict(obj.get("traq")) if obj.get("traq") is not None else None
        })
        return _obj


