# coding: utf-8

"""
    traQ v3

    traQ v3 API

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime

from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr

class UnreadChannel(BaseModel):
    """
    未読チャンネル情報  # noqa: E501
    """
    channel_id: StrictStr = Field(..., alias="channelId", description="チャンネルUUID")
    count: StrictInt = Field(..., description="未読メッセージ数")
    noticeable: StrictBool = Field(..., description="自分宛てメッセージが含まれているかどうか")
    since: datetime = Field(..., description="チャンネルの最古の未読メッセージの日時")
    updated_at: datetime = Field(..., alias="updatedAt", description="チャンネルの最新の未読メッセージの日時")
    oldest_message_id: StrictStr = Field(..., alias="oldestMessageId", description="そのチャンネルの未読の中で最も古いメッセージのid")
    __properties = ["channelId", "count", "noticeable", "since", "updatedAt", "oldestMessageId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UnreadChannel:
        """Create an instance of UnreadChannel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UnreadChannel:
        """Create an instance of UnreadChannel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UnreadChannel.parse_obj(obj)

        _obj = UnreadChannel.parse_obj({
            "channel_id": obj.get("channelId"),
            "count": obj.get("count"),
            "noticeable": obj.get("noticeable"),
            "since": obj.get("since"),
            "updated_at": obj.get("updatedAt"),
            "oldest_message_id": obj.get("oldestMessageId")
        })
        return _obj


