# coding: utf-8

"""
    traQ v3

    traQ v3 API

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime as _datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from traqapi.models.user_account_state import UserAccountState
from traqapi.models.user_permission import UserPermission
from traqapi.models.user_tag import UserTag
from typing import Optional, Set
from typing_extensions import Self

class MyUserDetail(BaseModel):
    """
    自分のユーザー詳細情報
    """ # noqa: E501
    id: StrictStr = Field(description="ユーザーUUID")
    bio: Annotated[str, Field(strict=True, max_length=1000)] = Field(description="自己紹介(biography)")
    groups: List[StrictStr] = Field(description="所属グループのUUIDの配列")
    tags: List[UserTag] = Field(description="タグリスト")
    updated_at: _datetime = Field(description="更新日時", alias="updatedAt")
    last_online: Optional[_datetime] = Field(description="最終オンライン日時", alias="lastOnline")
    twitter_id: Annotated[str, Field(strict=True)] = Field(description="Twitter ID", alias="twitterId")
    name: Annotated[str, Field(strict=True)] = Field(description="ユーザー名")
    display_name: Annotated[str, Field(min_length=0, strict=True, max_length=32)] = Field(description="ユーザー表示名", alias="displayName")
    icon_file_id: StrictStr = Field(description="アイコンファイルUUID", alias="iconFileId")
    bot: StrictBool = Field(description="BOTかどうか")
    state: UserAccountState
    permissions: List[UserPermission] = Field(description="所有している権限の配列")
    home_channel: Optional[StrictStr] = Field(description="ホームチャンネル", alias="homeChannel")
    __properties: ClassVar[List[str]] = ["id", "bio", "groups", "tags", "updatedAt", "lastOnline", "twitterId", "name", "displayName", "iconFileId", "bot", "state", "permissions", "homeChannel"]

    @field_validator('twitter_id')
    def twitter_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9_]{1,15}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9_]{1,15}$/")
        return value

    @field_validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9_-]{1,32}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9_-]{1,32}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MyUserDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item in self.tags:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tags'] = _items
        # set to None if last_online (nullable) is None
        # and model_fields_set contains the field
        if self.last_online is None and "last_online" in self.model_fields_set:
            _dict['lastOnline'] = None

        # set to None if home_channel (nullable) is None
        # and model_fields_set contains the field
        if self.home_channel is None and "home_channel" in self.model_fields_set:
            _dict['homeChannel'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MyUserDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "bio": obj.get("bio"),
            "groups": obj.get("groups"),
            "tags": [UserTag.from_dict(_item) for _item in obj["tags"]] if obj.get("tags") is not None else None,
            "updatedAt": obj.get("updatedAt"),
            "lastOnline": obj.get("lastOnline"),
            "twitterId": obj.get("twitterId"),
            "name": obj.get("name"),
            "displayName": obj.get("displayName"),
            "iconFileId": obj.get("iconFileId"),
            "bot": obj.get("bot"),
            "state": obj.get("state"),
            "permissions": obj.get("permissions"),
            "homeChannel": obj.get("homeChannel")
        })
        return _obj


