# coding: utf-8

"""
    traQ v3

    traQ v3 API

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr
from traqapi.models.bot_mode import BotMode

class PatchBotRequest(BaseModel):
    """
    BOT情報変更リクエスト  # noqa: E501
    """
    display_name: Optional[constr(strict=True, max_length=32)] = Field(None, alias="displayName", description="BOTユーザー表示名")
    description: Optional[constr(strict=True, max_length=1000)] = Field(None, description="BOTの説明")
    privileged: Optional[StrictBool] = Field(None, description="特権")
    mode: Optional[BotMode] = None
    endpoint: Optional[StrictStr] = Field(None, description="BOTサーバーエンドポイント")
    developer_id: Optional[StrictStr] = Field(None, alias="developerId", description="移譲先の開発者UUID")
    subscribe_events: Optional[conlist(StrictStr)] = Field(None, alias="subscribeEvents", description="購読するイベント")
    __properties = ["displayName", "description", "privileged", "mode", "endpoint", "developerId", "subscribeEvents"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PatchBotRequest:
        """Create an instance of PatchBotRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PatchBotRequest:
        """Create an instance of PatchBotRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PatchBotRequest.parse_obj(obj)

        _obj = PatchBotRequest.parse_obj({
            "display_name": obj.get("displayName"),
            "description": obj.get("description"),
            "privileged": obj.get("privileged"),
            "mode": obj.get("mode"),
            "endpoint": obj.get("endpoint"),
            "developer_id": obj.get("developerId"),
            "subscribe_events": obj.get("subscribeEvents")
        })
        return _obj


