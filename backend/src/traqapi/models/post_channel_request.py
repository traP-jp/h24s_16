# coding: utf-8

"""
    traQ v3

    traQ v3 API

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator

class PostChannelRequest(BaseModel):
    """
    チャンネル作成リクエスト  # noqa: E501
    """
    name: constr(strict=True) = Field(..., description="チャンネル名")
    parent: Optional[StrictStr] = Field(..., description="親チャンネルのUUID ルートに作成する場合はnullを指定")
    __properties = ["name", "parent"]

    @validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9-_]{1,20}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9-_]{1,20}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PostChannelRequest:
        """Create an instance of PostChannelRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if parent (nullable) is None
        # and __fields_set__ contains the field
        if self.parent is None and "parent" in self.__fields_set__:
            _dict['parent'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PostChannelRequest:
        """Create an instance of PostChannelRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PostChannelRequest.parse_obj(obj)

        _obj = PostChannelRequest.parse_obj({
            "name": obj.get("name"),
            "parent": obj.get("parent")
        })
        return _obj


