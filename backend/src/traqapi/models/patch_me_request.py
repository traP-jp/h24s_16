# coding: utf-8

"""
    traQ v3

    traQ v3 API

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator

class PatchMeRequest(BaseModel):
    """
    自分のユーザー情報変更リクエスト  # noqa: E501
    """
    display_name: Optional[constr(strict=True, max_length=32, min_length=0)] = Field(None, alias="displayName", description="新しい表示名")
    twitter_id: Optional[constr(strict=True)] = Field(None, alias="twitterId", description="TwitterID")
    bio: Optional[constr(strict=True, max_length=1000)] = Field(None, description="自己紹介(biography)")
    home_channel: Optional[StrictStr] = Field(None, alias="homeChannel", description="ホームチャンネルのUUID `00000000-0000-0000-0000-000000000000`を指定すると、ホームチャンネルが`null`に設定されます")
    __properties = ["displayName", "twitterId", "bio", "homeChannel"]

    @validator('twitter_id')
    def twitter_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[a-zA-Z0-9_]{1,15}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9_]{1,15}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PatchMeRequest:
        """Create an instance of PatchMeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PatchMeRequest:
        """Create an instance of PatchMeRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PatchMeRequest.parse_obj(obj)

        _obj = PatchMeRequest.parse_obj({
            "display_name": obj.get("displayName"),
            "twitter_id": obj.get("twitterId"),
            "bio": obj.get("bio"),
            "home_channel": obj.get("homeChannel")
        })
        return _obj


