# coding: utf-8

"""
    traQ v3

    traQ v3 API

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class OgpMedia(BaseModel):
    """
    OGPに含まれる画像の情報  # noqa: E501
    """
    url: StrictStr = Field(...)
    secure_url: Optional[StrictStr] = Field(..., alias="secureUrl")
    type: Optional[StrictStr] = Field(...)
    width: Optional[StrictInt] = Field(...)
    height: Optional[StrictInt] = Field(...)
    __properties = ["url", "secureUrl", "type", "width", "height"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> OgpMedia:
        """Create an instance of OgpMedia from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if secure_url (nullable) is None
        # and __fields_set__ contains the field
        if self.secure_url is None and "secure_url" in self.__fields_set__:
            _dict['secureUrl'] = None

        # set to None if type (nullable) is None
        # and __fields_set__ contains the field
        if self.type is None and "type" in self.__fields_set__:
            _dict['type'] = None

        # set to None if width (nullable) is None
        # and __fields_set__ contains the field
        if self.width is None and "width" in self.__fields_set__:
            _dict['width'] = None

        # set to None if height (nullable) is None
        # and __fields_set__ contains the field
        if self.height is None and "height" in self.__fields_set__:
            _dict['height'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> OgpMedia:
        """Create an instance of OgpMedia from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return OgpMedia.parse_obj(obj)

        _obj = OgpMedia.parse_obj({
            "url": obj.get("url"),
            "secure_url": obj.get("secureUrl"),
            "type": obj.get("type"),
            "width": obj.get("width"),
            "height": obj.get("height")
        })
        return _obj


