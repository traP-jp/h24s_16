# coding: utf-8

"""
    traQ v3

    traQ v3 API

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401

from typing import Any, List, Optional
from pydantic import BaseModel, Field, StrictStr, ValidationError, validator
from traqapi.models.child_created_event import ChildCreatedEvent
from traqapi.models.forced_notification_changed_event import ForcedNotificationChangedEvent
from traqapi.models.name_changed_event import NameChangedEvent
from traqapi.models.parent_changed_event import ParentChangedEvent
from traqapi.models.pin_added_event import PinAddedEvent
from traqapi.models.pin_removed_event import PinRemovedEvent
from traqapi.models.subscribers_changed_event import SubscribersChangedEvent
from traqapi.models.topic_changed_event import TopicChangedEvent
from traqapi.models.visibility_changed_event import VisibilityChangedEvent
from typing import Union, Any, List, TYPE_CHECKING
from pydantic import StrictStr, Field

CHANNELEVENTDETAIL_ONE_OF_SCHEMAS = ["ChildCreatedEvent", "ForcedNotificationChangedEvent", "NameChangedEvent", "ParentChangedEvent", "PinAddedEvent", "PinRemovedEvent", "SubscribersChangedEvent", "TopicChangedEvent", "VisibilityChangedEvent"]

class ChannelEventDetail(BaseModel):
    """
    イベント内容
    """
    # data type: TopicChangedEvent
    oneof_schema_1_validator: Optional[TopicChangedEvent] = None
    # data type: SubscribersChangedEvent
    oneof_schema_2_validator: Optional[SubscribersChangedEvent] = None
    # data type: PinAddedEvent
    oneof_schema_3_validator: Optional[PinAddedEvent] = None
    # data type: PinRemovedEvent
    oneof_schema_4_validator: Optional[PinRemovedEvent] = None
    # data type: NameChangedEvent
    oneof_schema_5_validator: Optional[NameChangedEvent] = None
    # data type: ParentChangedEvent
    oneof_schema_6_validator: Optional[ParentChangedEvent] = None
    # data type: VisibilityChangedEvent
    oneof_schema_7_validator: Optional[VisibilityChangedEvent] = None
    # data type: ForcedNotificationChangedEvent
    oneof_schema_8_validator: Optional[ForcedNotificationChangedEvent] = None
    # data type: ChildCreatedEvent
    oneof_schema_9_validator: Optional[ChildCreatedEvent] = None
    if TYPE_CHECKING:
        actual_instance: Union[ChildCreatedEvent, ForcedNotificationChangedEvent, NameChangedEvent, ParentChangedEvent, PinAddedEvent, PinRemovedEvent, SubscribersChangedEvent, TopicChangedEvent, VisibilityChangedEvent]
    else:
        actual_instance: Any
    one_of_schemas: List[str] = Field(CHANNELEVENTDETAIL_ONE_OF_SCHEMAS, const=True)

    class Config:
        validate_assignment = True

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = ChannelEventDetail.construct()
        error_messages = []
        match = 0
        # validate data type: TopicChangedEvent
        if not isinstance(v, TopicChangedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TopicChangedEvent`")
        else:
            match += 1
        # validate data type: SubscribersChangedEvent
        if not isinstance(v, SubscribersChangedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SubscribersChangedEvent`")
        else:
            match += 1
        # validate data type: PinAddedEvent
        if not isinstance(v, PinAddedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PinAddedEvent`")
        else:
            match += 1
        # validate data type: PinRemovedEvent
        if not isinstance(v, PinRemovedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PinRemovedEvent`")
        else:
            match += 1
        # validate data type: NameChangedEvent
        if not isinstance(v, NameChangedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NameChangedEvent`")
        else:
            match += 1
        # validate data type: ParentChangedEvent
        if not isinstance(v, ParentChangedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ParentChangedEvent`")
        else:
            match += 1
        # validate data type: VisibilityChangedEvent
        if not isinstance(v, VisibilityChangedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VisibilityChangedEvent`")
        else:
            match += 1
        # validate data type: ForcedNotificationChangedEvent
        if not isinstance(v, ForcedNotificationChangedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ForcedNotificationChangedEvent`")
        else:
            match += 1
        # validate data type: ChildCreatedEvent
        if not isinstance(v, ChildCreatedEvent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ChildCreatedEvent`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in ChannelEventDetail with oneOf schemas: ChildCreatedEvent, ForcedNotificationChangedEvent, NameChangedEvent, ParentChangedEvent, PinAddedEvent, PinRemovedEvent, SubscribersChangedEvent, TopicChangedEvent, VisibilityChangedEvent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in ChannelEventDetail with oneOf schemas: ChildCreatedEvent, ForcedNotificationChangedEvent, NameChangedEvent, ParentChangedEvent, PinAddedEvent, PinRemovedEvent, SubscribersChangedEvent, TopicChangedEvent, VisibilityChangedEvent. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: dict) -> ChannelEventDetail:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> ChannelEventDetail:
        """Returns the object represented by the json string"""
        instance = ChannelEventDetail.construct()
        error_messages = []
        match = 0

        # deserialize data into TopicChangedEvent
        try:
            instance.actual_instance = TopicChangedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SubscribersChangedEvent
        try:
            instance.actual_instance = SubscribersChangedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PinAddedEvent
        try:
            instance.actual_instance = PinAddedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PinRemovedEvent
        try:
            instance.actual_instance = PinRemovedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NameChangedEvent
        try:
            instance.actual_instance = NameChangedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ParentChangedEvent
        try:
            instance.actual_instance = ParentChangedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into VisibilityChangedEvent
        try:
            instance.actual_instance = VisibilityChangedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ForcedNotificationChangedEvent
        try:
            instance.actual_instance = ForcedNotificationChangedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ChildCreatedEvent
        try:
            instance.actual_instance = ChildCreatedEvent.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into ChannelEventDetail with oneOf schemas: ChildCreatedEvent, ForcedNotificationChangedEvent, NameChangedEvent, ParentChangedEvent, PinAddedEvent, PinRemovedEvent, SubscribersChangedEvent, TopicChangedEvent, VisibilityChangedEvent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into ChannelEventDetail with oneOf schemas: ChildCreatedEvent, ForcedNotificationChangedEvent, NameChangedEvent, ParentChangedEvent, PinAddedEvent, PinRemovedEvent, SubscribersChangedEvent, TopicChangedEvent, VisibilityChangedEvent. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        to_json = getattr(self.actual_instance, "to_json", None)
        if callable(to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> dict:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        to_dict = getattr(self.actual_instance, "to_dict", None)
        if callable(to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.dict())


