# coding: utf-8

"""
    traQ v3

    traQ v3 API

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr, validator
from traqapi.models.user_account_state import UserAccountState
from traqapi.models.user_tag import UserTag

class UserDetail(BaseModel):
    """
    ユーザー詳細情報  # noqa: E501
    """
    id: StrictStr = Field(..., description="ユーザーUUID")
    state: UserAccountState = Field(...)
    bot: StrictBool = Field(..., description="BOTかどうか")
    icon_file_id: StrictStr = Field(..., alias="iconFileId", description="アイコンファイルUUID")
    display_name: constr(strict=True, max_length=32, min_length=0) = Field(..., alias="displayName", description="ユーザー表示名")
    name: constr(strict=True) = Field(..., description="ユーザー名")
    twitter_id: constr(strict=True) = Field(..., alias="twitterId", description="Twitter ID")
    last_online: Optional[datetime] = Field(..., alias="lastOnline", description="最終オンライン日時")
    updated_at: datetime = Field(..., alias="updatedAt", description="更新日時")
    tags: conlist(UserTag) = Field(..., description="タグリスト")
    groups: conlist(StrictStr) = Field(..., description="所属グループのUUIDの配列")
    bio: constr(strict=True, max_length=1000) = Field(..., description="自己紹介(biography)")
    home_channel: Optional[StrictStr] = Field(..., alias="homeChannel", description="ホームチャンネル")
    __properties = ["id", "state", "bot", "iconFileId", "displayName", "name", "twitterId", "lastOnline", "updatedAt", "tags", "groups", "bio", "homeChannel"]

    @validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9_-]{1,32}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9_-]{1,32}$/")
        return value

    @validator('twitter_id')
    def twitter_id_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9_]{0,15}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9_]{0,15}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserDetail:
        """Create an instance of UserDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in tags (list)
        _items = []
        if self.tags:
            for _item in self.tags:
                if _item:
                    _items.append(_item.to_dict())
            _dict['tags'] = _items
        # set to None if last_online (nullable) is None
        # and __fields_set__ contains the field
        if self.last_online is None and "last_online" in self.__fields_set__:
            _dict['lastOnline'] = None

        # set to None if home_channel (nullable) is None
        # and __fields_set__ contains the field
        if self.home_channel is None and "home_channel" in self.__fields_set__:
            _dict['homeChannel'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserDetail:
        """Create an instance of UserDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserDetail.parse_obj(obj)

        _obj = UserDetail.parse_obj({
            "id": obj.get("id"),
            "state": obj.get("state"),
            "bot": obj.get("bot"),
            "icon_file_id": obj.get("iconFileId"),
            "display_name": obj.get("displayName"),
            "name": obj.get("name"),
            "twitter_id": obj.get("twitterId"),
            "last_online": obj.get("lastOnline"),
            "updated_at": obj.get("updatedAt"),
            "tags": [UserTag.from_dict(_item) for _item in obj.get("tags")] if obj.get("tags") is not None else None,
            "groups": obj.get("groups"),
            "bio": obj.get("bio"),
            "home_channel": obj.get("homeChannel")
        })
        return _obj


