# coding: utf-8

"""
    traQ v3

    traQ v3 API

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime

from pydantic import BaseModel, Field, StrictStr
from traqapi.models.message import Message

class Pin(BaseModel):
    """
    ピン情報(メッセージ本体付き)  # noqa: E501
    """
    user_id: StrictStr = Field(..., alias="userId", description="ピン留めしたユーザーUUID")
    pinned_at: datetime = Field(..., alias="pinnedAt", description="ピン留めされた日時")
    message: Message = Field(...)
    __properties = ["userId", "pinnedAt", "message"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Pin:
        """Create an instance of Pin from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of message
        if self.message:
            _dict['message'] = self.message.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Pin:
        """Create an instance of Pin from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Pin.parse_obj(obj)

        _obj = Pin.parse_obj({
            "user_id": obj.get("userId"),
            "pinned_at": obj.get("pinnedAt"),
            "message": Message.from_dict(obj.get("message")) if obj.get("message") is not None else None
        })
        return _obj


