# coding: utf-8

"""
    traQ v3

    traQ v3 API

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist, constr

class StampPalette(BaseModel):
    """
    スタンプパレット情報  # noqa: E501
    """
    id: StrictStr = Field(..., description="スタンプパレットUUID")
    name: constr(strict=True, max_length=30) = Field(..., description="パレット名")
    stamps: conlist(StrictStr) = Field(..., description="パレット内のスタンプのUUID配列")
    creator_id: StrictStr = Field(..., alias="creatorId", description="作成者UUID")
    created_at: datetime = Field(..., alias="createdAt", description="パレット作成日時")
    updated_at: datetime = Field(..., alias="updatedAt", description="パレット更新日時")
    description: constr(strict=True, max_length=1000) = Field(..., description="パレット説明")
    __properties = ["id", "name", "stamps", "creatorId", "createdAt", "updatedAt", "description"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> StampPalette:
        """Create an instance of StampPalette from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> StampPalette:
        """Create an instance of StampPalette from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return StampPalette.parse_obj(obj)

        _obj = StampPalette.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "stamps": obj.get("stamps"),
            "creator_id": obj.get("creatorId"),
            "created_at": obj.get("createdAt"),
            "updated_at": obj.get("updatedAt"),
            "description": obj.get("description")
        })
        return _obj


