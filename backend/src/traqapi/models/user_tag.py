# coding: utf-8

"""
    traQ v3

    traQ v3 API

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime

from pydantic import BaseModel, Field, StrictBool, StrictStr

class UserTag(BaseModel):
    """
    ユーザータグ  # noqa: E501
    """
    tag_id: StrictStr = Field(..., alias="tagId", description="タグUUID")
    tag: StrictStr = Field(..., description="タグ文字列")
    is_locked: StrictBool = Field(..., alias="isLocked", description="タグがロックされているか")
    created_at: datetime = Field(..., alias="createdAt", description="タグ付与日時")
    updated_at: datetime = Field(..., alias="updatedAt", description="タグ更新日時")
    __properties = ["tagId", "tag", "isLocked", "createdAt", "updatedAt"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> UserTag:
        """Create an instance of UserTag from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> UserTag:
        """Create an instance of UserTag from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return UserTag.parse_obj(obj)

        _obj = UserTag.parse_obj({
            "tag_id": obj.get("tagId"),
            "tag": obj.get("tag"),
            "is_locked": obj.get("isLocked"),
            "created_at": obj.get("createdAt"),
            "updated_at": obj.get("updatedAt")
        })
        return _obj


