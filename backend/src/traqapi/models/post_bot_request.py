# coding: utf-8

"""
    traQ v3

    traQ v3 API

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr, constr, validator
from traqapi.models.bot_mode import BotMode

class PostBotRequest(BaseModel):
    """
    BOT作成リクエスト  # noqa: E501
    """
    name: constr(strict=True, max_length=16) = Field(..., description="BOTユーザーID 自動的に接頭辞\"BOT_\"が付与されます")
    display_name: constr(strict=True, max_length=32) = Field(..., alias="displayName", description="BOTユーザー表示名")
    description: constr(strict=True, max_length=1000) = Field(..., description="BOTの説明")
    mode: BotMode = Field(...)
    endpoint: Optional[StrictStr] = Field(None, description="BOTサーバーエンドポイント BOT動作モードがHTTPの場合必須です")
    __properties = ["name", "displayName", "description", "mode", "endpoint"]

    @validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9_-]{1,16}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9_-]{1,16}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PostBotRequest:
        """Create an instance of PostBotRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PostBotRequest:
        """Create an instance of PostBotRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PostBotRequest.parse_obj(obj)

        _obj = PostBotRequest.parse_obj({
            "name": obj.get("name"),
            "display_name": obj.get("displayName"),
            "description": obj.get("description"),
            "mode": obj.get("mode"),
            "endpoint": obj.get("endpoint")
        })
        return _obj


