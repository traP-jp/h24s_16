# coding: utf-8

"""
    traQ v3

    traQ v3 API

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List
from pydantic import BaseModel, Field, StrictStr, conlist
from traqapi.models.ogp_media import OgpMedia

class Ogp(BaseModel):
    """
    OGPの情報  # noqa: E501
    """
    type: StrictStr = Field(...)
    title: StrictStr = Field(...)
    url: StrictStr = Field(...)
    images: conlist(OgpMedia) = Field(...)
    description: StrictStr = Field(...)
    videos: conlist(OgpMedia) = Field(...)
    __properties = ["type", "title", "url", "images", "description", "videos"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Ogp:
        """Create an instance of Ogp from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item in self.images:
                if _item:
                    _items.append(_item.to_dict())
            _dict['images'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in videos (list)
        _items = []
        if self.videos:
            for _item in self.videos:
                if _item:
                    _items.append(_item.to_dict())
            _dict['videos'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Ogp:
        """Create an instance of Ogp from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Ogp.parse_obj(obj)

        _obj = Ogp.parse_obj({
            "type": obj.get("type"),
            "title": obj.get("title"),
            "url": obj.get("url"),
            "images": [OgpMedia.from_dict(_item) for _item in obj.get("images")] if obj.get("images") is not None else None,
            "description": obj.get("description"),
            "videos": [OgpMedia.from_dict(_item) for _item in obj.get("videos")] if obj.get("videos") is not None else None
        })
        return _obj


