# coding: utf-8

"""
    traQ v3

    traQ v3 API

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, constr, validator

class Channel(BaseModel):
    """
    チャンネル  # noqa: E501
    """
    id: StrictStr = Field(..., description="チャンネルUUID")
    parent_id: Optional[StrictStr] = Field(..., alias="parentId", description="親チャンネルUUID")
    archived: StrictBool = Field(..., description="チャンネルがアーカイブされているかどうか")
    force: StrictBool = Field(..., description="強制通知チャンネルかどうか")
    topic: StrictStr = Field(..., description="チャンネルトピック")
    name: constr(strict=True) = Field(..., description="チャンネル名")
    children: conlist(StrictStr) = Field(..., description="子チャンネルのUUID配列")
    __properties = ["id", "parentId", "archived", "force", "topic", "name", "children"]

    @validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9-_]{1,20}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9-_]{1,20}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Channel:
        """Create an instance of Channel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if parent_id (nullable) is None
        # and __fields_set__ contains the field
        if self.parent_id is None and "parent_id" in self.__fields_set__:
            _dict['parentId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Channel:
        """Create an instance of Channel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Channel.parse_obj(obj)

        _obj = Channel.parse_obj({
            "id": obj.get("id"),
            "parent_id": obj.get("parentId"),
            "archived": obj.get("archived"),
            "force": obj.get("force"),
            "topic": obj.get("topic"),
            "name": obj.get("name"),
            "children": obj.get("children")
        })
        return _obj


