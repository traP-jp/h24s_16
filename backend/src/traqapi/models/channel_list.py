# coding: utf-8

"""
    traQ v3

    traQ v3 API

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, conlist
from traqapi.models.channel import Channel
from traqapi.models.dm_channel import DMChannel

class ChannelList(BaseModel):
    """
    GET /channelsレスポンス  # noqa: E501
    """
    public: conlist(Channel) = Field(..., description="パブリックチャンネルの配列")
    dm: Optional[conlist(DMChannel)] = Field(None, description="ダイレクトメッセージチャンネルの配列")
    __properties = ["public", "dm"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ChannelList:
        """Create an instance of ChannelList from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in public (list)
        _items = []
        if self.public:
            for _item in self.public:
                if _item:
                    _items.append(_item.to_dict())
            _dict['public'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dm (list)
        _items = []
        if self.dm:
            for _item in self.dm:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dm'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ChannelList:
        """Create an instance of ChannelList from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ChannelList.parse_obj(obj)

        _obj = ChannelList.parse_obj({
            "public": [Channel.from_dict(_item) for _item in obj.get("public")] if obj.get("public") is not None else None,
            "dm": [DMChannel.from_dict(_item) for _item in obj.get("dm")] if obj.get("dm") is not None else None
        })
        return _obj


