# coding: utf-8

"""
    traQ v3

    traQ v3 API

    The version of the OpenAPI document: 3.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime

from pydantic import BaseModel, Field, StrictBool, StrictStr, constr, validator
from traqapi.models.user_account_state import UserAccountState

class User(BaseModel):
    """
    ユーザー情報  # noqa: E501
    """
    id: StrictStr = Field(..., description="ユーザーUUID")
    name: constr(strict=True) = Field(..., description="ユーザー名")
    display_name: constr(strict=True, max_length=32, min_length=0) = Field(..., alias="displayName", description="ユーザー表示名")
    icon_file_id: StrictStr = Field(..., alias="iconFileId", description="アイコンファイルUUID")
    bot: StrictBool = Field(..., description="BOTかどうか")
    state: UserAccountState = Field(...)
    updated_at: datetime = Field(..., alias="updatedAt", description="更新日時")
    __properties = ["id", "name", "displayName", "iconFileId", "bot", "state", "updatedAt"]

    @validator('name')
    def name_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[a-zA-Z0-9_-]{1,32}$", value):
            raise ValueError(r"must validate the regular expression /^[a-zA-Z0-9_-]{1,32}$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> User:
        """Create an instance of User from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> User:
        """Create an instance of User from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return User.parse_obj(obj)

        _obj = User.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "display_name": obj.get("displayName"),
            "icon_file_id": obj.get("iconFileId"),
            "bot": obj.get("bot"),
            "state": obj.get("state"),
            "updated_at": obj.get("updatedAt")
        })
        return _obj


